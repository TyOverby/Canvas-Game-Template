<!DOCTYPE HTML>
<html>
	<head>
		<title>
			index.html
		</title>

<script>
/*
 *	../js/engine/GameMath.js
 */
GameMath = {
	Vector2f: function(x,y){
		this.x = x;
		this.y = y;

		this.clone = function(){
			return new GameMath.Vector2f(this.x,this.y);
		}
		this.plus = function(one,two){
			if(two!=undefined){
				return new GameMath.Vector2f(this.x + one,this.y + two);
			}
			else{
				return this.plus(one.x,one.y)
			}
		}
		this.plusEquals = function(one,two){
			if(two!=undefined){
				this.x += one;
				this.y += two;
			}
			else{
				this.plusEquals(one.x,one.y)
			}
		}

		this.minus = function(one,two){
			if(two!=undefined){
				return new GameMath.Vector2f(this.x - one,this.y - two);
			}
			else{
				return this.minus(one.x,one.y)
			}
		}
		this.minusEquals = function(one,two){
			if(two!=undefined){
				this.x -= one;
				this.y -= two;
			}
			else{
				this.minusEquals(one.x,one.y)
			}
		}

		

		this.times = function(one,two){
			if(two!=undefined){
				return new GameMath.Vector2f(this.x * one,this.y * two);
			}
			else{
				return new GameMath.Vector2f(this.x * one, this.y * one);
			}
		}
		this.timesEquals = function(one,two){
			if(two!=undefined){
				this.x *= one;
				this.y *= two;
			}
			else{
				this.x *= one;
				this.y *= one;
			}
		}


		this.divideBy = function(one,two){
			if(two!=undefined){
				return new GameMath.Vector2f(this.x / one,this.y / two);
			}
			else{
				return new GameMath.Vector2f(this.x / one, this.y / one);
			}
		}

		this.divideEquals = function(one,two){
			if(two!=undefined){
				this.x /= one;
				this.y /= two;
			}
			else{
				this.x /= one;
				this.y /= one;
			}
		}

		this.reverse = function(){
			this.x=-this.x;
			this.y=-this.y;

			return this;
		}

		this.normalize = function(){
			var magnitude = Math.sqrt(this.x*this.x+this.y*this.y);

			this.x /= magnitude;
			this.y /= magnitude;
			return this;
		}
		
		this.equals = function(other){
			if(this.x!=other.x){
				return false;
			}
			if(this.y!=other.y){
				return false;
			}
			return true;
		}
	},
	Random:{
		randDouble: function(limit1,limit2){
			if(limit2 != undefined){
				return GameMath.Random.randDouble(limit2-limit1)+limit1;
			}
			else{
				return Math.random()*limit1;
			}
		},
		randInt:function(limit1,limit2){
			if(limit2!=undefined){
				return GameMath.Random.randInt(limit2-limit1)+limit1;
			}
			else{
				return Math.floor(Math.random()*(limit1+1));
			}
		}
	}
}

</script>
<script>
/*
 *	../js/engine/draw.js
 */
CanvasRenderingContext2D.prototype.drawLine = function(p1,p2){
    this.beginPath();
    this.moveTo(p1.x,p1.y);
    this.lineTo(p2.x,p2.y);
    this.closePath();
    this.stroke();
}


CanvasRenderingContext2D.prototype.drawVector = function(position, velocity){
    if(velocity == null || velocity ==undefined){
        velocity = position;
        position = new Vector2f(0,0);
    }

    this.drawLine(position,velocity.plus(position));
}

CanvasRenderingContext2D.prototype.fillCircle = function(position, radius){
    this.beginPath();
    this.arc(position.x,position.y,radius,0,Math.PI*2,true);
    this.fill();
    this.closePath();
}

/*

function Pane(canvasId){
	var canvas = document.getElementById(canvasId);
		if(canvas === undefined){
				throw "No canvas matching" + canvasId;
		}
	var ctx = canvas.getContext("2d");

	this.getWidth = function(){
		return ctx.width;
	}

	this.getHeight = function(){
		return ctx.height;
	}

	this.setSize = function(width,height){
		ctx.width = width;
		ctx.height = height;

		canvas.width = width;
		canvas.height = height;

		console.log(width+" "+height)
	}

	this.getContext = function(type){
		if(arguments[0]){
			return canvas.getContext(type);
		}
		else{
			return ctx;
		}
	}

	this.clearRect = function(x,y,width,height){
		ctx.clearRect(x,y,width,height);
	}

	this.resetColor = function(){
		ctx.fillStyle = "cyan";
		ctx.strokeStyle = "cyan";
		ctx.globalAlpha = 1;
		ctx.fillstyle = 5;
	}

	this.setFillColor = function(color){
		if(color!=undefined){
			ctx.fillStyle = color;
		}
		else{
			ctx.fillStyle="black"
		}
	}
	this.setStrokeColor = function(color){
		if(color!=undefined){
			ctx.strokeStyle = color;
		}
		else{
			ctx.strokeStyle="black"
		}
	}

	this.drawRectFill = function(x,y,width,height,color){
		this.setFillColor(color);

		ctx.fillRect(x,y,width,height);

		this.resetColor();
	}
	this.drawRectStroke = function(x, y, width, height, color, lineWidth){
		this.setStrokeColor(color);

		ctx.lineWidth = lineWidth;
		ctx.strokeRect(x,y,width,height);

		this.resetColor();
	}

	this.drawCircleFill = function(x,y,radius,color){
		this.setFillColor(color);

		ctx.beginPath();
		ctx.arc(x,y,radius,0,Math.PI*2,true);
		ctx.fill();
		ctx.closePath();

		this.resetColor();
	}
	this.drawCircleStroke = function(x,y,radius,color){
		this.setStrokeColor(color);

		ctx.beginPath();
		ctx.arc(x,y,radius,0,Math.PI*2,true);
		ctx.stroke();
		ctx.closePath();

		this.resetColor();
	}

	this.drawLine = function(x1,y1,x2,y2,color){
		this.setStrokeColor(color);

		ctx.beginPath();
		ctx.moveTo(x1,y1);
		ctx.lineTo(x2,y2);
		ctx.closePath();
		ctx.stroke();

		this.resetColor();
	}
}
*/

</script>
<script>
/*
 *	../js/engine/engine.js
 */
function Engine(game,paneID){
	var hasRan = false;
	var game = game;
	var targetFps = 60;
	var prevTime = new Date();

    var intervalId = [];
    pane = document.getElementById(paneID).getContext("2d");

	this.run = function(){
		if(!hasRan){
			game.startup();
		}
        hasRan = true;
		intervalId.push(setInterval(this.update,1));
	}

	this.stop = function(message){
        for(var i=0;i<intervalId.length;i++){
		    clearInterval(intervalId[i]);
        }

		if(message!=null){
			console.error(message);
		}
	}

	this.update = function(){
		var curTime = new Date();
		var diffTime=curTime.valueOf()-prevTime.valueOf();
		if(diffTime>1000/targetFps){
			game.update(diffTime);
			prevTime = curTime;
			game.render(pane);
		}
	}
}

</script>

<script>
/*
 *	../js/game/game.js
 */
function BasicGame(){
    var p = new GameMath.Vector2f(5,5);
    var p_radius = 10;
    var v = new GameMath.Vector2f(5,10);
    var a = new GameMath.Vector2f(0,1);

	this.startup = function(){
        console.log("starting up");
	}

	this.update = function(deltaT){

        p.plusEquals(v);
        v.plusEquals(a);
        if(p.x<=0||p.x+2*p_radius>=pane.canvas.width){
            v.x=-v.x;
        }
        console.log(pane.canvas.height);
        if(p.y<=0||p.y+2*p_radius>=pane.canvas.height){
            v.y=-v.y;
            v.y = v.y/2;

            v.x = v.x * 0.9;
        }
	}



	this.render = function(pane){
        pane.fillStyle="red";
        pane.fillCircle(p,p_radius);
	}
}


function initializeEngine(){
    game = new Engine(new BasicGame(),"canvas");
    console.log("initialized!");
}


</script>
	</head>

	<body style="background-color:black;" onload="initializeEngine()">
		<canvas id="canvas" width="500" height="500" ></canvas>

        <br />
        <button onclick="game.run()">Start</button>
        <button onclick="game.stop()">Stop</button>
    </body>
</html>
